Tasks:
• Always enable VK_LAYER_KHRONOS_validation
    • Don't ignore any non-verbose messages

• Get rid of "Debug" config. Only Release from now onwards

• Only support 1 Camera

• Get rid of presentation queue. Present on Graphics Queue
    • OMG!!!

• No try-catch. Unacceptable method of error handling unless it's extremely specific edge case
    • Get rid of all try-catch
    • Use asserts instead, or use "__debugbreak()"

• Proper Frame Fencing
    • Should only stall CPU before the FIRST command buffer submission

• Support only 1 queue for now

• Automatic texture mip generation on GPU

• Oct-tree culling on CPU
    • Practically mandatory. Uploading the entire scene's worth of instance transforms every frame cannot scale up.
    • Same for Directional Light Shadow pass
    • Cull objects ONCE per view-proj (Should only be 2. Camera & Dir Light), then re-use culled lists of objects in all Renderers

• Use giant GPU circular buffers for gpu instance transforms
    • Suballocate exact necessary bytes as neededed for culled instances

• Don't clear GBuffer every frame
    • Your game should have every pixel in every GBuffer Render Target filled up.

• Encapsulate as many Vulkan API calls as possible inside your "CommandList" class

• Implement Full Z-PrePass
    • Treat every Opaque object as an occluder to keep things simple

• Multi-thread all Graphic Tasks & Renderers
    • Implement free-list of command buffers. They must all be properly fenced before re-used

• Render Graph
    • Scheduling of asynchronous compute fences
    • Allocation of transient resources with optimal lifetimes and memory aliasing
    • Transitioning of sub-resources using split-barriers to hide latency and improve overlap on the GPU
    • Parallel command list recording
    • Culling of unused resources and passes in the graph
    • Validation of usage and resource dependencies

• Compute Queue
    • Anything that can be run asyncronously with Graphics Queue
    • GPU Fence where necessary
    
• AMD ShadowFX: https://github.com/GPUOpen-Effects/ShadowFX

• AMD FSR 2.0: https://github.com/GPUOpen-LibrariesAndSDKs/FidelityFX-SDK/blob/main/docs/techniques/super-resolution-temporal.md
